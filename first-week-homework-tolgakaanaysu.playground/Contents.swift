import UIKit

//MARK: - Question 1
func isPalindrome(str: String) -> Bool {
    var strArray = Array(str)
    var count = strArray.count
    for i in 0..<(count / 2) {
        if strArray[i] != strArray[count - 1 - i]{
            print("\(str) palindrom deÄŸildir.")
            return false
        }
    }
    print("\(str) palindromdur.")
    return true
}

isPalindrome(str: "Tolga")
isPalindrome(str: "123321")
isPalindrome(str: "Patika")
isPalindrome(str: "12321")
isPalindrome(str: "TolgaagloT")

print("\n")
//MARK: - Question 3
func pyramidFunction(numberOfFloors: Int) {
    var counter = 1
    while(counter <= numberOfFloors) {
        print(String(repeating: "*", count: counter))
        counter += 1
    }
}

pyramidFunction(numberOfFloors: 4)
print("\n")
pyramidFunction(numberOfFloors: 6)
print("\n")
pyramidFunction(numberOfFloors: 5)
print("\n")

//MARK: - Question 4
func pyramidFunctionInCenter(numberOfFloors n: Int) {
    var counter = 1
    while(counter <= n) {
        
        print( String(repeating: " ", count: n - counter) + String(repeating: "* ", count: counter))
        counter += 1
    }
}

pyramidFunctionInCenter(numberOfFloors: 6)
print("\n")
pyramidFunctionInCenter(numberOfFloors: 10)
print("\n")
pyramidFunctionInCenter(numberOfFloors: 9)
print("\n")

//MARK: - Question 5
// 5-1
/* If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
 Find the sum of all the multiples of 3 or 5 below 1000. */

func multiplesOfThreeOrFive(){
    let bound = 1000
    var sum = 0
    for i in 1..<bound {
        if i % 5 == 0 || i % 3 == 0 {
            sum += i
        }
    }
    print(sum)
}
multiplesOfThreeOrFive()

// 5-2
/*
 Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
 
 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 
 By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/
func sumEvenFibonacciNumbers(){
    var sum = 0
    var left = 0
    var right = 1
    
    while true {
        let temp = right
        right += left
        left = temp
        
        if right % 2 == 0 {
            sum += right
        }
        print(right)
        if right > 4000000 {
            break
        }
    }
    print("sum: ",sum)
}

print("\n")
sumEvenFibonacciNumbers()


// 5-3
//The prime factors of 13195 are 5, 7, 13 and 29.
// What is the largest prime factor of the number 600851475143 ?

func isPrimeNumber(_ number: Int) -> Bool {
    guard number % 2 != 0 || number == 2 else { return false }
    var counter = 1
    while counter < number {
        if  number % counter == 0 && counter != 1{
            return false
        }
        counter += 1
    }
    
    return true
}
func largestPrimeFactor(_ number: Int ) -> Int {
    var bound = Int(sqrt(Double(number)))
    var counter = 2
    var largest = 1
    
    while counter < bound + 1{
        
        if (Double(number) / Double(counter)).truncatingRemainder(dividingBy: 1.0) == 0 && isPrimeNumber(number / counter) {
            return number / counter
        } else {
            if counter % 2 != 0 && number % counter == 0 && isPrimeNumber(counter) {
                largest = counter
            }
        }
        //
        counter += 1
    }
    
    return largest
}

//largestPrimeFactor(58)
//largestPrimeFactor(60)
//largestPrimeFactor(35)
//largestPrimeFactor(600851475143)
